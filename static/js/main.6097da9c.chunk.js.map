{"version":3,"sources":["utils.ts","Api.ts","style/main.style.ts","components/QuestionCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","axios","get","fetchQuizResponse","data","results","map","item","answers","arr","incorrect_answers","correct_answer","sort","Math","random","Container","styled","div","Button","button","start","QuestionWrapper","Title","h1","QuestionCard","question","callback","userAnswer","questionNr","totalquestions","dangerouslySetInnerHTML","__html","answer","id","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","numbr","setNumbr","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","Medium","newQuestions","length","undefined","e","providedAnswer","currentTarget","correct","prev","answerObject","correctAnswer","TotalQuestions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6097da9c.chunk.js","sourcesContent":["export const shuffleArray = (arr: string[]) => [...arr].sort(() => Math.random() - 0.5)\n\nexport enum Difficulty {\n    Easy = 'easy',\n    Medium = 'medium',\n    Hard = 'hard'\n}\n\nexport type Question = {\n    category: string,\n    correct_answer: string,\n    difficulty: string,\n    incorrect_answers: string[],\n    question: string,\n    type: string,\n    answers?: string[]\n}\n\nexport type AnswerObject = {\n    question: string,\n    providedAnswer: string,\n    correct: boolean,\n    correctAnswer: string\n  }\n\n  export type AnswerProps = {\n    question: any,\n    answers: string[],\n    callback: any,\n    userAnswer: AnswerObject | undefined,\n    questionNr: number,\n    totalquestions: number\n}\n","import axios from 'axios';\nimport {shuffleArray, Difficulty, Question} from './utils'\n\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=18&difficulty=${difficulty}&type=multiple`;\n    const fetchQuizResponse = await axios.get(endpoint);\n    return fetchQuizResponse.data.results.map((item: Question)  => ({ \n        ...item,\n        answers: shuffleArray([...item.incorrect_answers, item.correct_answer])\n    }))\n}","\nimport styled from \"styled-components\";\n\ntype ButtonInterfface = {\n    start: boolean;\n};\n\nexport const Container = styled.div`\n    min-height: 100vh;\n    padding: 0 0.5rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: #ff8c00;\n    color: #fff\n`;\n\nexport const Button = styled.button<ButtonInterfface>`\n    background-color:  ${({ start }) => (start ? \"#5eba7d\" : \"#fff6bb\")}; \n    color: #333;\n    border-radius: 15px;\n    border: none;\n    font-weight: 700;\n    text-align: center;\n    margin: 10px auto;\n    padding: 7px;\n    min-width: 200px;\n    outline: none\n`\n\nexport const QuestionWrapper = styled.div`\n    width: 400px;\n    margin: 0 auto;\n    padding: 0 16px;\n`;\n\nexport const Title = styled.h1`\n    color: #e0b115;\n    background: #000;\n    padding: 0 30px;\n`","import React from \"react\";\nimport { AnswerProps } from \"../utils\";\nimport { Button, QuestionWrapper } from \"../style/main.style\";\n\nconst QuestionCard: React.FC<AnswerProps> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNr,\n\ttotalquestions,\n}) => (\n\t<QuestionWrapper>\n\t\t<p>\n\t\t\tQuestion: {questionNr} / {totalquestions}\n\t\t</p>\n\t\t<p dangerouslySetInnerHTML={{ __html: question }}></p>\n\t\t{answers &&\n\t\t\tanswers.map((answer, id) => (\n\t\t\t\t<div key={`${questionNr}-${id}`}>\n\t\t\t\t\t{/* double exclamation mark sets the object to boolean */}\n\t\t\t\t\t<Button\n\t\t\t\t\t\tstart={false}\n\t\t\t\t\t\tdisabled={!!userAnswer}\n\t\t\t\t\t\tvalue={answer}\n\t\t\t\t\t\tonClick={callback}\n\t\t\t\t\t>\n\t\t\t\t\t\t{answer}\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t))}\n\t</QuestionWrapper>\n);\n\nexport default QuestionCard;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./Api\";\nimport { Difficulty, AnswerObject } from \"./utils\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { Container, Button, Title } from \"./style/main.style\";\n\nconst TotalQuestions = 10;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState([]);\n\tconst [numbr, setNumbr] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startQuiz = async () => {\n\t\tsetLoading(true);\n\n\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\tTotalQuestions,\n\t\t\tDifficulty.Medium\n\t\t);\n\t\tsetQuestions(newQuestions);\n\t\tsetGameOver(false);\n\t\tsetNumbr(0);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tconst providedAnswer = e.currentTarget.value;\n\t\tconst correct = questions[numbr].correct_answer === providedAnswer;\n\n\t\tcorrect && setScore((prev) => prev + 1);\n\n\t\tconst answerObject: AnswerObject = {\n\t\t\tquestion: questions[numbr].question,\n\t\t\tprovidedAnswer,\n\t\t\tcorrect,\n\t\t\tcorrectAnswer: questions[numbr].correct_answer,\n\t\t};\n\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\tif (numbr + 1 < TotalQuestions) setNumbr(numbr + 1);\n\t\tif (userAnswers.length === TotalQuestions - 1) setGameOver(true);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Title>QUIZ</Title>\n\t\t\t{gameOver && (\n\t\t\t\t<Button start={true} onClick={startQuiz}>\n\t\t\t\t\tStart\n\t\t\t\t</Button>\n\t\t\t)}\n\t\t\t<p>Score: {score}</p>\n\t\t\t{!loading && !gameOver && questions.length > 0 && (\n\t\t\t\t<>\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNr={numbr + 1}\n\t\t\t\t\t\ttotalquestions={TotalQuestions}\n\t\t\t\t\t\tquestion={questions[numbr].question}\n\t\t\t\t\t\tanswers={questions[numbr].answers}\n\t\t\t\t\t\tuserAnswer={\n\t\t\t\t\t\t\tuserAnswers ? userAnswers[numbr] : undefined\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t</>\n\t\t\t)}\n\n\t\t\t{loading && <p>Loading...</p>}\n\t\t</Container>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}